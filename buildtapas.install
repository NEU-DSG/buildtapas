<?php
/**
 * @file
 *
 * Installation actions for buildtapas profile
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function buildtapas_install() {

	_tapas_create_filter_formats();
	_tapas_rdf();

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

//	_tapas_create_role('administrator', 'admin_perms.csv');
//	_tapas_create_role('paidmember', 'paid_perms.csv');
}

/**
 * Creates 'Full HTML' and 'Filtered HTML' filters
 *
 * These are identical to the filters created by
 * the standard installation profile.
 */
function _tapas_create_filter_formats() {

	$base_filters = array(
		'filter_url' => array('weight' => 0, 'status' => 1, ),
		'filter_autop' => array('weight' => 1, 'status' => 1, ),
		'filter_htmlcorrector' => array('weight' => 10, 'status' => 1, ),
	);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => $base_filters,
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

	$base_filters['filter_html'] = array('weight' => 1, 'status' => 1, );

  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => $base_filters, 
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);
}

/**
 * Adds standard RDF mappings
 *
 * These are the same rdf mappings as would be added by the standard profile.
 */

function _tapas_rdf() {

  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'article',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
}


/**
 *
 */
function _tapas_create_role($rolename, $permissions_file) {
	//TODO: create roles.

$admin_role = new stdClass();

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

}
