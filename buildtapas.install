<?php
/**
 * @file
 * buildtapas.install
 *
 * Installation actions for buildtapas profile
 */

/** Name of paid-member role. Must match any modules that access it. */
define ('TAPAS_PAIDMEMBER_ROLE', 'paidmember');
/** Name of admin role. Must match any modules that access it. */
define ('TAPAS_ADMIN_ROLE', 'administrator');

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function buildtapas_install() {

	_buildtapas_create_filter_formats();
	_buildtapas_rdf();

  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');
  variable_set(
		'user_register', 
		USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

	buildtapas_setup_anon_role();
	buildtapas_setup_authenticated_role();
	buildtapas_create_paidmember_role();
	buildtapas_create_admin_role();

	// Enable the theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'tapas_redesign')
    ->execute();
	
	variable_set('theme_default', 'tapas_redesign');
  variable_set('admin_theme', 'tapas_redesign');
}


//======================================================================
// Sanity Check before installation.
//======================================================================

/**
 * Check for unrecognized permissions.
 *
 * Drupal will blow up if you try to pass it unrecognized
 * permission strings in certain functions, so this function
 * will allow us to "fail fast" and with a clear error message,
 * rather than slowly with a cryptic one.
 */
function buildtapas_check_permissions_array($perms) {

	$all_perms = array_keys(user_permission_get_modules());
	$err_check = array_diff($perms, $all_perms);

	if ($err_check) {
		echo "
		################################
		found unrecognized permissions:
		--------------------------------
		";

		foreach ($err_check as $err) {
			echo "$err
			";
		}

		echo "
		################################
		";
		exit(1);
	}
}

//======================================================================
//  Set up roles.
//======================================================================


/**
 * Grants permissions to the built-in DRUPAL_ANONYMOUS_RID role.
 */

function buildtapas_setup_anon_role() {

	$anon_permissions = array(
		'access content',
		'access comments',
	);

	user_role_grant_permissions(
		DRUPAL_ANONYMOUS_RID, $anon_permissions);
}

/**
 * Grants permissions to the built-in DRUPAL_AUTHENTICATED_RID role.
 */

function buildtapas_setup_authenticated_role() {

	$authenticated_perms = _buildtapas_registered_user_perms();
	user_role_grant_permissions(
		DRUPAL_AUTHENTICATED_RID, $authenticated_perms);

}

/**
 * Creates Padimember role with appropriate permissions.
 *
 * This excludes roles related to the tapascontent module, since those
 * content types won't yet be in existence when this runs. For tapas
 * specific permissions, see the tapascontent.install.
 */

function buildtapas_create_paidmember_role() {
	$paidmember_role = new stdClass();
	$paidmember_role->name = TAPAS_PAIDMEMBER_ROLE;
	$paidmember_role->weight = 4;

	user_role_save($paidmember_role);

	$paidmember_permissions = array(
		'edit own comments',
		'use text format full_html',
		'change own username',
	) +
	_buildtapas_registered_user_perms();

	user_role_grant_permissions(
		$paidmember_role->rid, $paidmember_permissions);


}

/**
 * Creates Admin role with all permissions.
 */

function buildtapas_create_admin_role() {

	$admin_role = new stdClass();
	$admin_role->name = TAPAS_ADMIN_ROLE;
	$admin_role->weight = 5;
	user_role_save($admin_role);
	
	$admin_permissions = array_keys(module_invoke_all('permission'));
	user_role_grant_permissions($admin_role->rid, $admin_permissions);

	variable_set('user_admin_role', $admin_role->rid);
}


/**
 * Return array of permissions for registered users
 */
function _buildtapas_registered_user_perms() {

	$registered_perms =  array(
		'access content',
		'access comments',
		'post comments',
		'skip comment approval',
		'access user contact forms',
		'use text format filtered_html',
		'view own unpublished content',
		'search content',
		'use advanced search',
		'access user profiles',
		'cancel account',
		'create forum content',
		'edit own forum content',
		'delete own forum content',
	);

	buildtapas_check_permissions_array($registered_perms);
	return $registered_perms;
}

//======================================================================
// Other Installation tasks.
//======================================================================


/**
 * Creates 'Full HTML' and 'Filtered HTML' filters
 *
 * These are identical to the filters created by
 * the standard installation profile.
 */
function _buildtapas_create_filter_formats() {

	$base_filters = array(
		'filter_url' => array('weight' => 0, 'status' => 1, ),
		'filter_autop' => array('weight' => 1, 'status' => 1, ),
		'filter_htmlcorrector' => array('weight' => 10, 'status' => 1, ),
	);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => $base_filters,
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

	$base_filters['filter_html'] = array('weight' => 1, 'status' => 1, );

  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => $base_filters, 
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);
}
/**
 * Adds standard RDF mappings
 *
 * These are the same rdf mappings as would be added by the standard profile.
 */

function _buildtapas_rdf() {

  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
}
